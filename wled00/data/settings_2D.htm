<!DOCTYPE html>

<html lang="en">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" name="viewport"/>
<title>${d90884f4ec475af65b0fe32aed21e92b31e1ce73:2D Set-up}</title>
<script async="" src="common.js" type="text/javascript"></script>
<script>
	var maxPanels=64;
	var ctx = null;
	function fS(){d.Sf.submit();} // <button type=submit> sometimes didn't work
	function S() {
		getLoc();
		loadJS(getURL('/settings/s.js?p=10'), false, undefined, ()=>{
			UI();
			Sf.MPC.setAttribute("max",maxPanels);
		});	// If we set async false, file is loaded and executed, then next statement is processed
		if (loc) d.Sf.action = getURL('/settings/2D');
	}

	function UI() {
		if (gId("somp").value === "0") {
			gId("mpdiv").style.display = "none";
			resetPanels();
			return;
		}
		gId("mpdiv").style.display = "block";
		draw();
	}

	function addPanels() {
		let c = parseInt(d.Sf.MPC.value);
		let i = gId("panels").children.length;
		if (i<c) for (let j=i; j<c; j++) addPanel(j);
		if (i>c) for (let j=i; j>c; j--) remPanel();
	}

	function addPanel(i=0) {
		let p = gId("panels");
		if (p.children.length >= maxPanels) return;
		var pw = parseInt(d.Sf.PW.value);
		var ph = parseInt(d.Sf.PH.value);
		let b = `<div id="pnl${i}"><hr class="sml">Panel ${i}<br>
1<sup>st</sup> LED: <select name="P${i}B" oninput="UI()">
	<option value="0">Top</option>
	<option value="1">Bottom</option>
</select><select name="P${i}R" oninput="UI()">
	<option value="0">Left</option>
	<option value="1">Right</option>
</select><br>
Orientation: <select name="P${i}V" oninput="UI()">
	<option value="0">Horizontal</option>
	<option value="1">Vertical</option>
</select><br>
Serpentine: <input type="checkbox" name="P${i}S" oninput="UI()"><br>
Dimensions (WxH): <input name="P${i}W" type="number" min="1" max="255" value="${pw}" oninput="UI()"> x <input name="P${i}H" type="number" min="1" max="255" value="${ph}" oninput="UI()"><br>
Offset X:<input name="P${i}X" type="number" min="0" max="255" value="0" oninput="UI()">
Y:<input name="P${i}Y" type="number" min="0" max="255" value="0" oninput="UI()"><br><i>(offset from top-left corner in # LEDs)</i>
</div>`;
		p.insertAdjacentHTML("beforeend", b);
	}

	function remPanel() {
		let p = gId("panels").children;
	  	var i = p.length;
	  	if (i <= 1) return;
	  	p[i-1].remove();
	}

	function resetPanels() {
		d.Sf.MPC.value = 1;
		let e = gId("panels").children
		for (let i = e.length; i>0; i--) e[i-1].remove();
	}
/*
	function btnPanel(i) {
		gId("pnl_add").style.display = (i<maxPanels) ? "inline":"none";
		gId("pnl_rem").style.display = (i>1) ? "inline":"none";
	}
*/
	function gen() {
		resetPanels();

		var pansH = parseInt(Sf.MPH.value);
		var pansV = parseInt(Sf.MPV.value);
		var c = pansH*pansV;
		Sf.MPC.value = c; // number of panels

		var ps = Sf.PS.checked;
		var pv = Sf.PV.value==="1";
		var pb = Sf.PB.value==="1";
		var pr = Sf.PR.value==="1";
		var pw = parseInt(Sf.PW.value);
		var ph = parseInt(Sf.PH.value);

		var h = pv ? pansV : pansH;
		var v = pv ? pansH : pansV;
		for (let j = 0, p = 0; j < v; j++) {
			for (let i = 0; i < h; i++, p++) {
				if (j*i < maxPanels) addPanel(p);
				var y = (pv?pr:pb) ? v-j-1: j;
				var x = (pv?pb:pr) ? h-i-1 : i;
				x = ps && j%2 ? h-x-1 : x;
				Sf[`P${p}X`].value = (pv?y:x) * pw;
				Sf[`P${p}Y`].value = (pv?x:y) * ph
				Sf[`P${p}W`].value = pw;
				Sf[`P${p}H`].value = ph;
			}
		}
	}

	function expand(o,i)
	{
		i.style.display = i.style.display!=="none" ? "none" : "";
		o.style.rotate = i.style.display==="none" ? "none" : "90deg";
	}

	function draw() {

		if (!ctx) {
			//WLEDMM: add canvas, initialize and set UI
			var canvas = gId("canvas");
			canvas.width  = window.innerWidth > 640?640:400; //Mobile gets 400, pc 640
			canvas.height = canvas.width;
			ctx = canvas.getContext('2d');

			// window.requestAnimationFrame(animate);
		}

		//calc max height and width
		var maxWidth = 0;
		var maxHeight = 0;
		for (let p=0; p<gId("panels").children.length; p++) {
			var px = parseInt(Sf[`P${p}X`].value); //first led x
			var py = parseInt(Sf[`P${p}Y`].value); //first led y
			var pw = parseInt(Sf[`P${p}W`].value); //width
			var ph = parseInt(Sf[`P${p}H`].value); //height
			maxWidth = Math.max(maxWidth, px + pw);
			maxHeight = Math.max(maxHeight, py + ph);
		}

		ctx.canvas.height = ctx.canvas.width / maxWidth * maxHeight;
		ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
		var space=0; // space between panels + margin
		var ppL = (ctx.canvas.width  - space * 2) / maxWidth; //pixels per led

		ctx.lineWidth = 1;
		ctx.strokeStyle="yellow";
		ctx.strokeRect(0, 0, ctx.canvas.width, ctx.canvas.height); // add space between panels

		for (let p=0; p<gId("panels").children.length; p++) {
			var px = parseInt(Sf[`P${p}X`].value); //first led x
			var py = parseInt(Sf[`P${p}Y`].value); //first led y
			var pw = parseInt(Sf[`P${p}W`].value); //width
			var ph = parseInt(Sf[`P${p}H`].value); //height

			var pb = Sf[`P${p}B`].value == "1"; //bottom
			var pr = Sf[`P${p}R`].value == "1"; //right
			var pv = Sf[`P${p}V`].value == "1"; //vertical
			var ps = Sf[`P${p}S`].checked; //serpentine

			var topLeftX = px*ppL + space; //left margin
			var topLeftY = py*ppL + space; //top margin

			ctx.lineWidth = 3;
			ctx.strokeStyle="white";
			ctx.strokeRect(topLeftX, topLeftY, pw*ppL, ph*ppL); // add space between panels

			var lnX;
			var lnY;

			//find start led
			if (pb) //bottom
				lnY = topLeftY + ph*ppL - ppL/2;
			else //top
				lnY = topLeftY + ppL/2;
			if (pr) //right
				lnX = topLeftX + pw*ppL - ppL/2;
			else //left
				lnX = topLeftX + ppL/2;

			//first led
			ctx.fillStyle = "green";
			ctx.beginPath();
			ctx.arc(lnX, lnY, ppL*0.5, 0, 2 * Math.PI);
			ctx.fill();

			//start line
			ctx.lineWidth = 1;
			ctx.beginPath();
			ctx.moveTo(lnX, lnY);

			var longLineLength = (pv?ph:pw)*ppL - ppL;
			for (let ln=0; ln<(pv?pw:ph); ln++) { //loop over panelwidth (or height of vertical?)

				var serpLine = ps && ln%2!=0; //serp: turn around if even line

				if (pv) //if vertical
					lnY += (pb?-1:1) * longLineLength * (serpLine?-1:1); //if vertical change the Y
				else
					lnX += (pr?-1:1) * longLineLength * (serpLine?-1:1); //if horizontal change the X

				ctx.lineTo(lnX, lnY); //draw the long line

				if (ln<(pv?pw:ph)-1) { //not the last
					//find the small line end point
					if (pv) //vertical
						lnX += (pr?-1:1) * ppL;
					else //horizontal
						lnY += (pb?-1:1) * ppL;

					//if serpentine go next else go down
					if (ps) { //serpentine
						ctx.lineTo(lnX, lnY); //draw the serpentine line
					} else { 
						//find the other end of the long line
						if (pv) //vertical
							lnY += (pb?1:-1) * longLineLength * (serpLine?-1:1); //min as we go back
						else //horizontal
							lnX += (pr?1:-1) * longLineLength * (serpLine?-1:1);
						ctx.moveTo(lnX, lnY); //move to the start point of the next long line
					}
				}
			}
			ctx.stroke();

			//last led
			ctx.fillStyle = "red";
			ctx.beginPath();
			ctx.arc(lnX, lnY, ppL*0.5, 0, 2 * Math.PI);
			ctx.fill();

			ctx.font = '40px Arial'; 
			ctx.fillStyle = "orange";
			ctx.fillText(p, topLeftX + pw/2*ppL - 10, topLeftY + ph/2*ppL + 10);
		}
		gId("MD").innerHTML = "Matrix Dimensions (W*H=LC): " + maxWidth + " x " + maxHeight + " = " + maxWidth * maxHeight;
	}
	</script>
<style>@import url("style.css");</style>
<script src="../scripts/localize.js"></script></head>
<body onload="S()">
<form id="form_s" method="post" name="Sf">
<div class="toprow">
<div class="helpB"><button onclick="H('features/2D')" type="button">?</button></div>
<button onclick="B()" type="button">${b52b36b7269fbfc58ec24bb724691951a3decbe8:Back}</button><button onclick="fS()" type="button">${efc007a393f66cdb14d57d385822a3d9e36ef873:Save}</button><hr/>
</div>
<h2>${049ca7d653bb59d22aa3cd48ccbb9790aa34bfa9:2D setup}</h2><span>${c33393947ffcf0715e2cf71314b549c94474420e:
	Strip or panel:
	}</span><select id="somp" name="SOMP" onchange="resetPanels();addPanels();UI();">
<option value="0">${2a5cb2baad41b0b7c671992f3de196e8d0861f96:1D Strip}</option>
<option value="1">${d75c78acb1cf9db31344da6cd218a672cd06ab13:2D Matrix}</option>
</select><br/>
<div id="mpdiv" style="display:none;">
<hr class="sml"/>
<h3><span>${fc9a7a46a1fa3c5c4ab212e3230056eb5ef0a8e5:Matrix Generator }</span><button id="expGen" onclick="expand(this,gId('mxGen'));" type="button">&gt;</button></h3>
<div id="mxGen" style="display:none;"><span>${9a1a1501b1b235bcc8be24a4467be7592bf42405:
			Panel dimensions (WxH): }</span><input max="128" min="1" name="PW" type="number" value="8"/><span>${ea31e8b43909a0c94f7c19f0833c16d86dd95aa7: x }</span><input max="128" min="1" name="PH" type="number" value="8"/><br/><span>${3bd8119c408b9d7d865e3308bf7134e34e73638c:
			Horizontal panels: }</span><input max="8" min="1" name="MPH" type="number" value="1"/><span>${8133fa39aeb98f8b8b1084a47b0f9383d96ef464:
			Vertical panels: }</span><input max="8" min="1" name="MPV" type="number" value="1"/><br/><span>${594492eaf969fdb998dc51a8c28a1d6feab6d925:
			1}</span><sup>${9b02d9974c14e623c9ffbed7360beacbf0dcb95f:st}</sup><span>${03804134e84618ec11461cd24813c4bc1a4d9db8: panel: }</span><select name="PB">
<option value="0">${cae0435c41e816c24f0838fdf4e76c044c8b4e00:Top}</option>
<option value="1">${cce7f2f2f0dc525117a70d581d9c335212145e5b:Bottom}</option>
</select><select name="PR">
<option value="0">${8ae1c34bd37fad49cc5f8e02da648a78e89c3ed8:Left}</option>
<option value="1">${954daa8b00335c66e262106e01f7dc22b19a4372:Right}</option>
</select><br/><span>${27ba40eeca074a44d3efd974f6247ca96dc8b4a8:
			Orientation: }</span><select name="PV">
<option value="0">${4f57a1ce99e68a7b05c42d0a7ea0070eafabd31c:Horizontal}</option>
<option value="1">${4b937cc841d82f8936cef1efb88708ab5b0f1ee5:Vertical}</option>
</select><br/><span>${50ee3432239410abf21c7505f0d2129e8349cae1:
			Serpentine: }</span><input name="PS" type="checkbox"/><br/>
<i class="warn"><span>${52064ea54e3b2415f237e9053791f5e883711412:Pressing Populate will create LED panel layout with pre-arranged matrix.}</span><br/><span>${cb064d2fa55f543d5948e593c5d8511aef530d96:Values above }</span><i>${1df91714444bb64cf37aff9300609af7c90f5590:will not}</i><span>${ccaa551f515102208559597e878105bb58b066d5: affect final layout.}</span><br/><span>${16ed55b1d5fb8dbe0a6d990b4dc748d3c760a176:
				WARNING: You may need to update each panel parameters after they are generated.}</span></i><br/>
<button onclick="gen();expand(gId('expGen'),gId('mxGen'));" type="button">${4a8227177d3aeba652ecd28ed5cb2423de649c8d:Populate}</button>
</div>
<hr class="sml"/>
<h3>${ca40bc8a2bf09de70fd1177a3f7bf862aeab0de4:Panel set-up}</h3><span>${ba5bc78944d1f76c8e79e8a7af3553e8248621e3:
		Number of panels: }</span><input max="64" min="1" name="MPC" oninput="addPanels();UI();" type="number" value="1"/><br/>
<i><span>${556aa8da89f318581d6f2e6526d3975dd337dd43:A matrix is made of 1 or more physical LED panels.}</span><br/><span>${f4777b588dd8a2b3f2f1a756be2080c3d1f90bf3:
		Each panel can be of different size and/or have different LED orientation and/or starting point and/or layout.}</span></i><br/>
<h3>${55098c2439b6cde6ddaf1a771211c987b808da16:LED panel layout}</h3>
<div id="panels">
</div>
<hr class="sml"/>
<div id="MD"></div>
<canvas id="canvas"></canvas>
<div id="json"><span>${9e9f6cf2cba9ff33f351bf22d06e8f589a3861ed:Gap file: }</span><input accept=".json" name="data" type="file"/><button class="sml" onclick="uploadFile(d.Sf.data,'/2d-gaps.json')" type="button">${8bdf057f91e76ae328b2a21d35f682daa08a0ec0:Upload}</button></div>
<i><span>${3987b615202f265be51c75e359aab5e544d3380d:Note: Gap file is a }</span><b>${25688845860b85616a3fabdeb2e53d4408f6dea8:.json}</b><span>${a19e5079fda45cb7475f268036f1a44d4f1075b4: file containing an array with number of elements equal to the matrix size.}</span><br/><span>${d50c89509268f09e716705d6ebb4d069e354f75c:
			A value of -1 means that pixel at that position is missing, a value of 0 means never paint that pixel, and 1 means regular pixel.}</span></i>
</div>
<hr/>
<button onclick="B()" type="button">${b52b36b7269fbfc58ec24bb724691951a3decbe8:Back}</button><button onclick="fS()" type="button">${efc007a393f66cdb14d57d385822a3d9e36ef873:Save}</button>
</form>
<div id="toast"></div>
<div id="I18N:template" style="display:none">wled00/data/settings_2D.htm</div></body>
</html>
