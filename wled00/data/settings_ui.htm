<!DOCTYPE html>

<html lang="en">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" name="viewport"/>
<title>${826e8fdcb0b1693928bacd6bc26875794261de29:UI Settings}</title>
<script async="" src="common.js" type="text/javascript"></script>
<script>
	var initial_ds, initial_st, initial_su, oldUrl;
	var sett = null;
	var l = {
		"comp":{
			"labels":"Show button labels",
			"colors":{
				"LABEL":"Color selection methods",
				"picker": "Color Wheel",
				"rgb": "RGB sliders",
				"quick": "Quick color selectors",
				"hex": "HEX color input"
				},
			"pcmbot": "Show bottom tab bar in PC mode",
			"pid": "Show preset IDs",
			"seglen": "Set segment length instead of stop LED",
			"segpwr": "Hide segment power &amp; brightness",
			"segexp" : "Always expand first segment",
			"css": "Enable custom CSS",
			"hdays": "Enable custom Holidays list",
			"fxdef": "Use effect default parameters",
			"on": "Power button preset override for On",
			"off": "Power button preset override for Off",
			"idsort": "Sort presets by ID"
		},
		"theme":{
			"alpha": {
				"bg":"Background opacity",
				"tab":"Button opacity"
			},
			"bg":{
				"url":"BG image URL",
				"rnd":"Random BG image",
				"rndGrayscale":"Grayscale",
				"rndBlur":"Blur"
			},
			"color":{
				"bg":"BG HEX color"
			}
		}
	};
	function set(path, obj, val) {
		var tar = obj;
		var pList = path.split('_');
		var len = pList.length;
		for(var i = 0; i < len-1; i++) {
			var elem = pList[i];
			if( !tar[elem] ) tar[elem] = {}
			tar = tar[elem];
		}
		tar[pList[len-1]] = val;
	}
	function addRec(s, path = "", label = null)
	{
		var str = "";
		for (let i in s)
		{
			var fk = path + (path?'_':'') + i;
			if (isO(s[i])) {
				if (label && label[i] && label[i]["LABEL"]) str += `<h3>${label[i]["LABEL"]}</h3>`;
				str += addRec(s[i], fk, label? label[i] : null);
			} else {
				var lb = fk;
				if (label && label[i]) lb = label[i];
				else if (s[i+'LABEL']) lb = s[i+'LABEL'];
				if (i.indexOf('LABEL') > 0) continue;
				var t = typeof s[i];
				if (gId(fk)) { //already exists
					if(t === 'boolean')
					{
						gId(fk).checked = s[i];
					} else {
						gId(fk).value = s[i];
					}
					if (gId(fk).previousElementSibling.matches('.l')) {
						gId(fk).previousElementSibling.innerHTML = lb;
					}
				} else {
					if(t === 'boolean')
					{
						str += `${lb}: <input class="agi cb" type="checkbox" id=${fk} ${s[i]?"checked":""}><br>`;
					} else if (t === 'number')
					{
						str += `${lb}: <input class="agi" type="number" id=${fk} value=${s[i]}><br>`;
					} else if (t === 'string')
					{
						str += `${lb}:<br><input class="agi" id=${fk} value=${s[i]}><br>`;
					}
				}
			}
		}
		return str;
	}

	function genForm(s) {
		var str = "";
		str = addRec(s,"",l);
		oldUrl = "";
		
		gId('gen').innerHTML = str;
		if (gId('theme_bg_rnd').checked) {
			toggle("Image");
		} else if (gId('theme_bg_url').value.startsWith('data:')) {
			gId("bg_url").classList.add("hide");
		} else oldUrl = gId("theme_bg_url").value;
	}
	function GetLS()
	{
		sett = localStorage.getItem('wledUiCfg');
		if (!sett) gId('lserr').style.display = "inline";
		try {
			sett = JSON.parse(sett);
		} catch (e) {
			sett = {};
			gId('lserr').style.display = "inline";
			gId('lserr').innerHTML = "&#9888; Settings JSON parsing failed. (" + e + ")";
		}
		genForm(sett);
		gId('dm').checked = (gId('theme_base').value === 'light');
	}

	function SetLS()
	{
		var l = d.querySelectorAll('.agi');
		for (var i = 0; i < l.length; i++) {
			var e = l[i];
			var val = e.classList.contains('cb') ? e.checked : e.value;
			set(e.id, sett, val);
			console.log(`${e.id} set to ${val}`);
		}
		try {
			localStorage.setItem('wledUiCfg', JSON.stringify(sett));
			gId('lssuc').style.display = "inline";
		} catch (e) {
			gId('lssuc').style.display = "none";
			gId('lserr').style.display = "inline";
			gId('lserr').innerHTML = "&#9888; Settings JSON saving failed. (" + e + ")";
		}
	}

	function cLS()
	{
		localStorage.removeItem('wledP');
		localStorage.removeItem('wledPmt');
		localStorage.removeItem('wledPalx');
		showToast("Cleared.");
	}
	
	function Save() {
		SetLS();
		if (d.Sf.DS.value != initial_ds || /*d.Sf.ST.checked != initial_st ||*/ d.Sf.SU.checked != initial_su) d.Sf.submit();
	}
	
	function S() {
		getLoc();
		loadJS(getURL('/settings/s.js?p=3'), false, undefined, ()=>{
			initial_ds = d.Sf.DS.value;
			//initial_st = d.Sf.ST.checked;
			initial_su = d.Sf.SU.checked;
			GetLS();
		});	// If we set async false, file is loaded and executed, then next statement is processed
		if (loc) d.Sf.action = getURL('/settings/ui');
	}
	function UI()
	{
		gId('idonthateyou').style.display = (gId('dm').checked) ? 'inline':'none';
		var f = gId('theme_base');
		if (f) f.value = (gId('dm').checked) ? 'light':'dark';
	}

	// random BG image
	function randomBg() {
		let url = oldUrl;
		let t = "theme_bg_rnd";
		if (gId(t).checked) {
			url = "https://picsum.photos/1920/1080";
			if (gId(`${t}Grayscale`).checked) url += "?grayscale";
			if (gId(`${t}Blur`).checked) url += (url.includes("?") ? "&" : "?") + "blur";
			gId("theme_bg_img").value = "";
			gId("bg_url").classList.remove("hide");
		}
		gId("theme_bg_url").value = url;
	}
	// own BG image
	function ownBg(element) {
		const file = element.files[0];
		const reader = new FileReader();
		reader.onload = () => {
			gId("theme_bg_url").value = reader.result;
			gId("bg_url").classList.add("hide");
			if (gId("theme_bg_rnd").checked) toggle("Image");
			gId("theme_bg_rnd").checked = false;
		}
		reader.readAsDataURL(file);
	}
	function removeBgImg() {
		gId("theme_bg_url").value = "";
		gId("theme_bg_img").value = "";
		gId("bg_url").classList.remove("hide");
		if (gId("theme_bg_rnd").checked) toggle("Image");
		gId("theme_bg_rnd").checked = false;
	}
	</script>
<style>@import url("style.css");</style>
<script src="../scripts/localize.js"></script></head>
<body onload="S()">
<form id="form_s" method="post" name="Sf">
<div class="toprow">
<div class="helpB"><button onclick="H('features/settings/#user-interface-settings')" type="button">?</button></div>
<button onclick="B()" type="button">${b52b36b7269fbfc58ec24bb724691951a3decbe8:Back}</button><button onclick="Save()" type="button">${efc007a393f66cdb14d57d385822a3d9e36ef873:Save}</button><br/>
<span id="lssuc" style="color:green; display:none">${555164d911bb981a2b75602449eb60dff37c6465:âœ” Local UI settings saved!}</span>
<span id="lserr" style="color:red; display:none">${b654da1ce33b6f90fbe48d9c6a5f55c79f3665c1:âš  Could not access local storage. Make sure it is enabled in your browser.}</span><hr/>
</div>
<h2>${8e0f34141662fe218632e3be87d86f36dc5ac2df:Web Setup}</h2><span>${525c62fba41c7b205e5d3815c24ec1feeb167ff0:
		Server description: }</span><input maxlength="32" name="DS" type="text"/><br/>
<!-- Sync button toggles both send and receive: <input type="checkbox" name="ST"><br> --><span>${be556cd78713b7927c1e7e054cc3393afa90bfae:
		Enable simplified UI: }</span><input name="SU" type="checkbox"/><br/>
<i><span>${2592ef860bc8211b5246c7534d6462fd4a12ee72:The following UI customization settings are unique both to the WLED device and this browser.}</span><br/><span>${f38c4f5cba93a4a806cd0ce12eaf425a68303861:
		You will need to set them again if using a different browser, device or WLED IP address.}</span><br/><span>${966ed2f427330c660a1619e1d62063b9e50d8f95:
		Refresh the main UI to apply changes.}</span></i><br/>
<div id="gen">${f88f6cffb1c2f18858c71ff22aae74a8f543f327:Loading settings...}</div>
<h3>${6a77f4ee89ab4a2abb59ccdb1f6ae3c2d9350990:UI Appearance}</h3>
<span class="l"></span>: <input class="agi cb" id="comp_labels" type="checkbox"/><br/>
<span class="l"></span>: <input class="agi cb" id="comp_pcmbot" type="checkbox"/><br/>
<span class="l"></span>: <input class="agi cb" id="comp_pid" type="checkbox"/><br/>
<span class="l"></span>: <input class="agi cb" id="comp_seglen" type="checkbox"/><br/>
<span class="l"></span>: <input class="agi cb" id="comp_segpwr" type="checkbox"/><br/>
<span class="l"></span>: <input class="agi cb" id="comp_segexp" type="checkbox"/><br/>
<span class="l"></span>: <input class="agi cb" id="comp_fxdef" type="checkbox"/><br/>
<span class="l"></span>: <input class="agi" id="comp_on" max="250" min="0" step="1" type="number"/><br/>
<span class="l"></span>: <input class="agi" id="comp_off" max="250" min="0" step="1" type="number"/><br/>
<span class="l"></span>: <input class="agi cb" id="comp_idsort" type="checkbox"/><br/><span>${efd1f1104f028aeb3765cf7e4b79a6036a7b1b71:
		I hate dark mode: }</span><input id="dm" onchange="UI()" type="checkbox"/><br/>
<span id="idonthateyou" style="display:none"><i>${1d96ee62e7596df2acd1fafd3a854d3d7b0bc99d:Why would you? }</i>ðŸ¥º<br/></span>
<span class="l"></span>: <input class="agi" id="theme_alpha_tab" max="1.0" min="0.0" step="0.01" type="number"/><br/>
<span class="l"></span>: <input class="agi" id="theme_alpha_bg" max="1.0" min="0.0" step="0.01" type="number"/><br/>
<span class="l"></span>: <input class="agi" id="theme_color_bg" maxlength="9" type="text"/><br/><span>${6f16ef7125bbb03b86f358d7977a528f52c730db:
		BG image: }</span><input accept="image/*" id="theme_bg_img" onchange="ownBg(this)" type="file"/> <input onclick="removeBgImg()" type="button" value="Remove"/><br/>
<span class="l"></span>: <input class="agi cb" id="theme_bg_rnd" onchange="randomBg();toggle('Image');" type="checkbox"/>
<div id="Image">
<div id="bg_url">
<span class="l"></span>: <input class="agi" id="theme_bg_url" type="text"/><br/>
</div>
</div>
<div class="hide" id="NoImage">
<h4>${788be0271ac83748bc8bb6449e969a7711d19e7b:Random BG image settings}</h4>
<span class="l"></span>: <input class="agi cb" id="theme_bg_rndGrayscale" onchange="randomBg()" type="checkbox"/><br/>
<span class="l"></span>: <input class="agi cb" id="theme_bg_rndBlur" onchange="randomBg()" type="checkbox"/><br/>
</div>
<input class="agi" id="theme_base" style="display:none"/>
<span class="l"></span>: <input class="agi cb" id="comp_css" type="checkbox"/><br/>
<div id="skin"><span>${1dadd769e810c0d8dbddd6e6201d868794061ddb:Custom CSS: }</span><input accept=".css" name="data" type="file"/> <input onclick="uploadFile(d.Sf.data,'/skin.css');" type="button" value="Upload"/><br/></div>
<span class="l"></span>: <input class="agi cb" id="comp_hdays" type="checkbox"/><br/>
<div id="holidays"><span>${4cf25a5dd632d7db029379b88997b0a4501f7676:Holidays: }</span><input accept=".json" name="data2" type="file"/> <input onclick="uploadFile(d.Sf.data2,'/holidays.json');" type="button" value="Upload"/><br/></div>
<div id="toast"></div>
<hr/><button onclick="cLS()" type="button">${155251bb4b933aa15838943604d78ca4dcd41544:Clear local storage}</button>
<hr/><button onclick="B()" type="button">${b52b36b7269fbfc58ec24bb724691951a3decbe8:Back}</button><button onclick="Save()" type="button">${efc007a393f66cdb14d57d385822a3d9e36ef873:Save}</button>
</form>
<div id="I18N:template" style="display:none">wled00/data/settings_ui.htm</div></body>
</html>