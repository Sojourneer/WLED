<!DOCTYPE html>

<html lang="en">
<head>
<meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" name="viewport"/>
<meta charset="utf-8"/>
<title>${1:Time Settings}</title>
<script>
	var d=document;
	var loc = false, locip, locproto = "http:";
	var el=false;
	var ms=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
	function H() { window.open("https://kno.wled.ge/features/settings/#time-settings"); }
	function B() { window.open(getURL("/settings"),"_self"); }
	function gId(s) { return d.getElementById(s); }
	function gN(s) { return d.getElementsByName(s)[0]; }
	// https://www.educative.io/edpresso/how-to-dynamically-load-a-js-file-in-javascript
	function loadJS(FILE_URL, async = true) {
		let scE = d.createElement("script");
		scE.setAttribute("src", FILE_URL);
		scE.setAttribute("type", "text/javascript");
		scE.setAttribute("async", async);
		d.body.appendChild(scE);
		// success event 
		scE.addEventListener("load", () => {
			//console.log("File loaded");
			BTa();GetV();updLoc();Cs();FC();
		});
		// error event
		scE.addEventListener("error", (ev) => {
			console.log("Error on loading file", ev);
			alert("Loading of configuration script failed.\nIncomplete page data!");
		});
	}
	function S() {
		let l = window.location;
		if (l.protocol == "file:") {
			loc = true;
			locip = localStorage.getItem('locIp');
			if (!locip) {
				locip = prompt("File Mode. Please enter WLED IP!");
				localStorage.setItem('locIp', locip);
			}
		} else {
			// detect reverse proxy
			let path = l.pathname;
			let paths = path.slice(1,path.endsWith('/')?-1:undefined).split("/");
			if (paths.length > 2) {
				locproto = l.protocol;
				loc = true;
				locip = l.hostname + (l.port ? ":" + l.port : "") + "/" + paths[0];
			}
		}
		loadJS(getURL('/settings/s.js?p=5'), false);	// If we set async false, file is loaded and executed, then next statement is processed
		if (loc) d.Sf.action = getURL('/settings/time');
	}
	function getURL(path) {
		return (loc ? locproto + "//" + locip : "") + path;
	}
	function expand(o,i)
	{
		var t = gId("WD"+i);
		t.style.display = t.style.display!=="none" ? "none" : "";
		o.innerHTML = t.style.display==="none" ? "&#128197;" : "&#x2715;";
	}
	function Cs() { gId("cac").style.display=(gN("OL").checked)?"block":"none"; }
	function BTa()
	{
		var ih="<thead><tr><th>En.</th><th>Hour</th><th>Minute</th><th>Preset</th><th></th></tr></thead>";
		for (i=0;i<8;i++) {
			ih+=`<tr><td><input name="W${i}" id="W${i}" type="hidden"><input id="W${i}0" type="checkbox"></td>
<td><input name="H${i}" class="xs" type="number" min="0" max="24"></td>
<td><input name="N${i}" class="xs" type="number" min="0" max="59"></td>
<td><input name="T${i}" class="s" type="number" min="0" max="250"></td>
<td><div id="CB${i}" onclick="expand(this,${i})" class="cal">&#128197;</div></td></tr>`;
			ih+=`<tr><td colspan=5><div id="WD${i}" style="display:none;background-color:#444;"><hr>Run on weekdays`;
			ih+=`<table><tr><th>M</th><th>T</th><th>W</th><th>T</th><th>F</th><th>S</th><th>S</th></tr><tr>`
			for (j=1;j<8;j++) ih+=`<td><input id="W${i}${j}" type="checkbox"></td>`;
			ih+=`</tr></table>from <select name="M${i}">`;
			for (j=0;j<12;j++) ih+=`<option value="${j+1}">${ms[j]}</option>`;
			ih+=`</select><input name="D${i}" class="xs" type="number" min="1" max="31"></input> to <select name="P${i}">`;
			for (j=0;j<12;j++) ih+=`<option value="${j+1}">${ms[j]}</option>`;
			ih+=`</select><input name="E${i}" class="xs" type="number" min="1" max="31"></input>
		<hr></div></td></tr>`;
		}
		ih+=`<tr><td><input name="W8" id="W8" type="hidden"><input id="W80" type="checkbox"></td>
<td>Sunrise<input name="H8" value="255" type="hidden"></td>
<td><input name="N8" class="xs" type="number" min="-59" max="59"></td>
<td><input name="T8" class="s" type="number" min="0" max="250"></td>
<td><div id="CB8" onclick="expand(this,8)" class="cal">&#128197;</div></td></tr><tr><td colspan=5>`;
		ih+=`<div id="WD8" style="display:none;background-color:#444;"><hr><table><tr><th>M</th><th>T</th><th>W</th><th>T</th><th>F</th><th>S</th><th>S</th></tr><tr>`;
		for (j=1;j<8;j++) ih+=`<td><input id="W8${j}" type="checkbox"></td>`;
		ih+="</tr></table><hr></div></td></tr>";
		ih+=`<tr><td><input name="W9" id="W9" type="hidden"><input id="W90" type="checkbox"></td>
<td>Sunset<input name="H9" value="255" type="hidden"></td>
<td><input name="N9" class="xs" type="number" min="-59" max="59"></td>
<td><input name="T9" class="s" type="number" min="0" max="250"></td>
<td><div id="CB9" onclick="expand(this,9)" class="cal">&#128197;</div></td></tr><tr><td colspan=5>`;
		ih+=`<div id="WD9" style="display:none;background-color:#444;"><hr><table><tr><th>M</th><th>T</th><th>W</th><th>T</th><th>F</th><th>S</th><th>S</th></tr><tr>`;
		for (j=1;j<8;j++) ih+=`<td><input id="W9${j}" type="checkbox"></td>`;
		ih+="</tr></table><hr></div></td></tr>";
		gId("TMT").innerHTML=ih;
	}
	function FC()
	{
		for(i=0;i<10;i++)
		{
			let wd = gId("W"+i).value;
			for(j=0;j<8;j++) {
				gId("W"+i+j).checked=wd>>j&1;
			}
			if ((wd&254) != 254 || (i<8 && (gN("M"+i).value != 1 || gN("D"+i).value != 1 || gN("P"+i).value != 12 || gN("E"+i).value != 31))) {
				expand(gId("CB"+i),i); //expand macros with custom DOW or date range set
			}
		}
	}
	function Wd()
	{
		a = [0,0,0,0,0,0,0,0,0,0];
		for (i=0; i<10; i++) {
			m=1;
			for(j=0;j<8;j++) { a[i]+=gId(("W"+i)+j).checked*m; m*=2;}
			gId("W"+i).value=a[i];
		}
		if (d.Sf.LTR.value==="S") { d.Sf.LT.value = -1*parseFloat(d.Sf.LT.value); }
		if (d.Sf.LNR.value==="W") { d.Sf.LN.value = -1*parseFloat(d.Sf.LN.value); }
	}
	function addRow(i,p,l,d) {
		var t = gId("macros");	// table
		var rCnt = t.rows.length;   // get the number of rows.
		var tr = t.insertRow(rCnt); // table row.
		var b = String.fromCharCode((i<10?48:55)+i);
		var td = document.createElement('td');          // TABLE DEFINITION.
		td = tr.insertCell(0);
		td.innerHTML = `Button ${i}:`;
		td = tr.insertCell(1);
		td.innerHTML = `<input name="MP${b}" type="number" class="s" min="0" max="250" value="${p}" required>`;
		td = tr.insertCell(2);
		td.innerHTML = `<input name="ML${b}" type="number" class="s" min="0" max="250" value="${l}" required>`;
		td = tr.insertCell(3);
		td.innerHTML = `<input name="MD${b}" type="number" class="s" min="0" max="250" value="${d}" required>`;
	}
	function getLoc() {
		if (!el) {
			window.addEventListener("message", (event) => {
				if (event.origin !== "https://locate.wled.me") return;
				if (event.data instanceof Object) {
					d.Sf.LT.value = event.data.lat;
					d.Sf.LN.value = event.data.lon;
					updLoc();
				}
			}, false);
			el = true;
		}
		window.open("https://locate.wled.me","_blank");
	}
	function updLoc(i) {
		if (parseFloat(d.Sf.LT.value)<0) { d.Sf.LTR.value = "S"; d.Sf.LT.value = -1*parseFloat(d.Sf.LT.value); } else d.Sf.LTR.value = "N";
		if (parseFloat(d.Sf.LN.value)<0) { d.Sf.LNR.value = "W"; d.Sf.LN.value = -1*parseFloat(d.Sf.LN.value); } else d.Sf.LNR.value = "E";
	}
	</script>
<style>@import url("style.css");</style>
</head>
<body onload="S()">
<form id="form_s" method="post" name="Sf" onsubmit="Wd()">
<div class="toprow">
<div class="helpB"><button onclick="H()" type="button">?</button></div>
<button onclick="B()" type="button">${2:Back}</button><button type="submit">${3:Save}</button><hr/>
</div>
<h2>${4:Time setup}</h2>${5:
		Get time from NTP server: }<input name="NT" type="checkbox"/><br/>
<input maxlength="32" name="NS" type="text"/><br/>${6:
		Use 24h format: }<input name="CF" type="checkbox"/><br/>${7:
		Time zone: 
		}<select name="TZ">
<option selected="" value="0">${8:GMT(UTC)}</option>
<option value="1">${9:GMT/BST}</option>
<option value="2">${10:CET/CEST}</option>
<option value="3">${11:EET/EEST}</option>
<option value="4">${12:US-EST/EDT}</option>
<option value="5">${13:US-CST/CDT}</option>
<option value="6">${14:US-MST/MDT}</option>
<option value="7">${15:US-AZ}</option>
<option value="8">${16:US-PST/PDT}</option>
<option value="9">${17:CST (AWST, PHST)}</option>
<option value="10">${18:JST (KST)}</option>
<option value="11">${19:AEST/AEDT}</option>
<option value="12">${20:NZST/NZDT}</option>
<option value="13">${21:North Korea}</option>
<option value="14">${22:IST (India)}</option>
<option value="15">${23:CA-Saskatchewan}</option>
<option value="16">${24:ACST}</option>
<option value="17">${25:ACST/ACDT}</option>
<option value="18">${26:HST (Hawaii)}</option>
<option value="19">${27:NOVT (Novosibirsk)}</option>
<option value="20">${28:AKST/AKDT (Anchorage)}</option>
<option value="21">${29:MX-CST}</option>
<option value="22">${30:PKT (Pakistan)}</option>
</select><br/>${31:
		UTC offset: }<input max="65500" min="-65500" name="UO" required="" type="number"/>${32: seconds (max. 18 hours)}<br/>${33:
		Current local time is }<span class="times">${34:unknown}</span>.<br/>${35:
		Latitude: }<select name="LTR"><option value="N">${36:N}</option><option value="S">${37:S}</option></select><input class="xl" max="66.6" min="0" name="LT" step="0.01" type="number"/><br/>${38:
		Longitude: }<select name="LNR"><option value="E">${39:E}</option><option value="W">${40:W}</option></select><input class="xl" max="180" min="0" name="LN" step="0.01" type="number"/><br/>
<button id="locbtn" onclick="getLoc()" type="button">${41:Get location}</button>
<div><i>${42:(opens new tab, only works in browser)}</i></div>
<div class="times" id="sun"></div>
<h3>${43:Clock}</h3>${44:
		Analog Clock overlay: }<input name="OL" onchange="Cs()" type="checkbox"/><br/>
<div id="cac">${45:
			First LED: }<input max="255" min="0" name="O1" required="" type="number"/>${46: Last LED: }<input max="255" min="0" name="O2" required="" type="number"/><br/>${47:
			12h LED: }<input max="255" min="0" name="OM" required="" type="number"/><br/>${48:
			Show 5min marks: }<input name="O5" type="checkbox"/><br/>${49:
			Seconds (as trail): }<input name="OS" type="checkbox"/><br/>
</div>${50:
		Countdown Mode: }<input name="CE" type="checkbox"/><br/>${51:
		Countdown Goal:}<br/>${52:
		Date: }<nowrap>20<input class="xs" max="99" min="0" name="CY" required="" type="number"/>-<input class="xs" max="12" min="1" name="CI" required="" type="number"/>-<input class="xs" max="31" min="1" name="CD" required="" type="number"/></nowrap><br/>${53:
		Time: }<nowrap><input class="xs" max="23" min="0" name="CH" required="" type="number"/>:<input class="xs" max="59" min="0" name="CM" required="" type="number"/>:<input class="xs" max="59" min="0" name="CS" required="" type="number"/></nowrap><br/>
<h3>${54:Macro presets}</h3>
<b>${55:Macros have moved!}</b><br/>
<i>${56:Presets now also can be used as macros to save both JSON and HTTP API commands.}<br/>${57:
		Just enter the preset ID below!}</i>
<i>${58:Use 0 for the default action instead of a preset}</i><br/>${59:
		Alexa On/Off Preset: }<input class="m" max="250" min="0" name="A0" required="" type="number"/> <input class="m" max="250" min="0" name="A1" required="" type="number"/><br/>${60:
		Countdown-Over Preset: }<input class="m" max="250" min="0" name="MC" required="" type="number"/><br/>${61:
		Timed-Light-Over Presets: }<input class="m" max="250" min="0" name="MN" required="" type="number"/><br/>
<h3>${62:Button actions}</h3>
<table id="macros" style="margin: 0 auto;">
<thead>
<tr>
<td>${63:push}<br/>${64:switch}</td>
<td>${65:short}<br/>${66:on-&gt;off}</td>
<td>${67:long}<br/>${68:off-&gt;on}</td>
<td>${69:double}<br/>${70:N/A}</td>
</tr>
</thead>
<tbody>
</tbody>
</table>
<a href="https://kno.wled.ge/features/macros/#analog-button" target="_blank">${71:Analog Button setup}</a>
<h3>${72:Time-controlled presets}</h3>
<div style="display: inline-block">
<table id="TMT" style="min-width:330px;"></table>
</div>
<hr/>
<button onclick="B()" type="button">${73:Back}</button><button type="submit">${74:Save}</button>
</form>
</body>
</html>
