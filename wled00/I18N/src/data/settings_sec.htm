<!DOCTYPE html>

<html lang="en">
<head>
<meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" name="viewport"/>
<meta charset="utf-8"/>
<title>${1:Misc Settings}</title>
<script>
		var d = document;
		var loc = false, locip, locproto = "http:";
		function H() { window.open("https://kno.wled.ge/features/settings/#security-settings"); }
		function B() { window.open(getURL("/settings"),"_self"); }
		function U() { window.open(getURL("/update"),"_self"); }
		function gId(s) { return d.getElementById(s); }
		function isObj(o) { return (o && typeof o === 'object' && !Array.isArray(o)); }
		// https://www.educative.io/edpresso/how-to-dynamically-load-a-js-file-in-javascript
		function loadJS(FILE_URL, async = true) {
			let scE = d.createElement("script");
			scE.setAttribute("src", FILE_URL);
			scE.setAttribute("type", "text/javascript");
			scE.setAttribute("async", async);
			d.body.appendChild(scE);
			// success event 
			scE.addEventListener("load", () => {
				//console.log("File loaded");
				GetV();
				setBckFilename(gId("bckcfg"));
				setBckFilename(gId("bckpresets"));
			});
			// error event
			scE.addEventListener("error", (ev) => {
				console.log("Error on loading file", ev);
				alert("Loading of configuration script failed.\nIncomplete page data!");
			});
		}
		var timeout;
		function showToast(text, error = false)
		{
			var x = gId("toast");
			x.innerHTML = text;
			x.classList.add(error ? "error":"show");
			clearTimeout(timeout);
			x.style.animation = 'none';
			timeout = setTimeout(function(){ x.classList.remove("show"); }, 2900);
		}
		function uploadFile(fO,name) {
			var req = new XMLHttpRequest();
			req.addEventListener('load', function(){showToast(this.responseText,this.status >= 400)});
			req.addEventListener('error', function(e){showToast(e.stack,true);});
			req.open("POST", getURL("/upload"));
			var formData = new FormData();
			formData.append("data", fO.files[0], name);
			req.send(formData);
			fO.value = '';
			return false;
		}
		function checkNum(o) {
			const specialkeys = ["Backspace", "Tab", "Enter", "Shift", "Control", "Alt", "Pause", "CapsLock", "Escape", "Space", "PageUp", "PageDown", "End", "Home", "ArrowLeft", "ArrowUp", "ArrowRight", "ArrowDown", "Insert", "Delete"];
			// true if key is a number or a special key
			if(event.key.match(/[0-9]/) || specialkeys.includes(event.key)) return true;
			event.preventDefault();
			return false;
		}
		function setBckFilename(x) {
			x.setAttribute("download","wled_" + x.getAttribute("download") + (sd=="WLED"?"":("_" +sd)));
		}
		function S() {
			let l = window.location;
			if (l.protocol == "file:") {
				loc = true;
				locip = localStorage.getItem('locIp');
				if (!locip) {
					locip = prompt("File Mode. Please enter WLED IP!");
					localStorage.setItem('locIp', locip);
				}
			} else {
				// detect reverse proxy
				let path = l.pathname;
				let paths = path.slice(1,path.endsWith('/')?-1:undefined).split("/");
				if (paths.length > 2) {
					locproto = l.protocol;
					loc = true;
					locip = l.hostname + (l.port ? ":" + l.port : "") + "/" + paths[0];
				}
			}
			if (loc) {
				gId("bckcfg").setAttribute('href',getURL(gId("bckcfg").pathname));
				gId("bckpresets").setAttribute('href',getURL(gId("bckpresets").pathname));
			}
			loadJS(getURL('/settings/s.js?p=6'), false);	// If we set async false, file is loaded and executed, then next statement is processed
			if (loc) d.Sf.action = getURL('/settings/sec');
		}
		function getURL(path) {
			return (loc ? locproto + "//" + locip : "") + path;
		}
	</script>
<style>
		@import url("style.css");
	</style>
</head>
<body onload="S()">
<form id="form_s" method="post" name="Sf">
<div class="toprow">
<div class="helpB"><button onclick="H()" type="button">?</button></div>
<button onclick="B()" type="button">${2:Back}</button><button type="submit">${3:Save}</button><hr/>
</div>
<h2>${4:Security &amp; Update setup}</h2>${5:
		Settings PIN: }<input id="PIN" inputmode="numeric" maxlength="4" minlength="4" name="PIN" onkeydown="checkNum(this)" pattern="[0-9]*" size="4" title="${42:Please enter a 4 digit number}" type="password"/><br/>
<div class="warn">${6:⚠ Unencrypted transmission. Be prudent when selecting PIN, do NOT use your banking, door, SIM, etc. pin!}</div><br/>${7:
		Lock wireless (OTA) software update: }<input name="NO" type="checkbox"/><br/>${8:
		Passphrase: }<input maxlength="32" name="OP" type="password"/><br/>${9:
		To enable OTA, for security reasons you need to also enter the correct password!}<br/>${10:
		The password should be changed when OTA is enabled.}<br/>
<b>${11:Disable OTA when not in use, otherwise an attacker can reflash device software!}</b><br/>
<i>${12:Settings on this page are only changable if OTA lock is disabled!}</i><br/>${13:
		Deny access to WiFi settings if locked: }<input name="OW" type="checkbox"/><br/><br/>${14:
		Factory reset: }<input name="RS" type="checkbox"/><br/>${15:
		All settings and presets will be erased.}<br/><br/>
<div class="warn">${16:⚠ Unencrypted transmission. An attacker on the same network can intercept form data!}</div>
<hr/>
<h3>${17:Software Update}</h3>
<button onclick="U()" type="button">${18:Manual OTA Update}</button><br/>${19:
		Enable ArduinoOTA: }<input name="AO" type="checkbox"/>
<hr/>
<h3>${20:Backup &amp; Restore}</h3>
<a class="btn lnk" download="presets" href="/presets.json" id="bckcfg">${21:Backup presets}</a><br/>
<div>${22:Restore presets}<br/><input accept=".json" name="data" type="file"/> <button onclick="uploadFile(d.Sf.data,'/presets.json');" type="button">${23:Upload}</button><br/></div><br/>
<a class="btn lnk" download="cfg" href="/cfg.json" id="bckpresets">${24:Backup configuration}</a><br/>
<div>${25:Restore configuration}<br/><input accept=".json" name="data2" type="file"/> <button onclick="uploadFile(d.Sf.data2,'/cfg.json');" type="button">${26:Upload}</button><br/></div>
<div class="warn">${27:⚠ Restoring presets/configuration will OVERWRITE your current presets/configuration.}<br/>${28:
		Incorrect configuration may require a factory reset or re-flashing of your ESP.}</div>${29:
		For security reasons, passwords are not backed up.
		}<hr/>
<h3>${30:About}</h3>
<a href="https://github.com/Aircoookie/WLED/" target="_blank">${31:WLED}</a>${32: version ##VERSION##}<!-- Autoreplaced from package.json --><br/><br/>
<a href="https://github.com/Aircoookie/WLED/wiki/Contributors-and-credits" target="_blank">${33:Contributors, dependencies and special thanks}</a><br/>${34:
		A huge thank you to everyone who helped me create WLED!}<br/><br/>${35:
		(c) 2016-2023 Christian Schwinne }<br/>
<i>${36:Licensed under the }<a href="https://github.com/Aircoookie/WLED/blob/master/LICENSE" target="_blank">${37:MIT license}</a></i><br/><br/>${38:
		Server message: }<span class="sip">${39: Response error! }</span><hr/>
<div id="toast"></div>
<button onclick="B()" type="button">${40:Back}</button><button type="submit">${41:Save}</button>
</form>
</body>
</html>